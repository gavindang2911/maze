=====OODExplaination=====

1. Display maze and game objects:

- The Map class is to generate the maze used Depth First Search algorithm to find the path starting from 
index (1, 1) and then we have methods to fullfill the maze to satisfy the requirements by checking 2x2 square constraint,
remove walls at corners,.. If users wish to change the size of the maze, they just need to adjust the height and width of the maze when
initialize the Map object and then the maze will be generated and be ready to use for any purposes

- Our design has a Symbol class that contains all text symbol of game objects 
and their states such as hero, monster, power, wall, space and unexplored area. 
Since if someone want to change the appearance of the game (for example change hero symbol
from "@" to "&"), they will not change any functionality of the UI or Logic except the string in Symbol class.

--------------------------------------------------------------------------------------------------------------

2. Keep track of where monster, hero and power in the maze:

- Our design has a Cell class that store x-coordinate and y-coordinate of all objects in the maze.
Therefore, monster, hero or power does not have to maintain x-coordinate and y-coordinate of itself which is
considered repeated code. Also, if someone want to add more object to the game (for example a bomb that costs
hero 1 power if it steps on it), they will reuse the Cell class for simplicity.
